{"version":3,"sources":["user.svg","Styles.ts","Icons.tsx","Header.tsx","Recipe.tsx","RecipeList.tsx","RecipeData.ts","PageTitle.tsx","Page.tsx","HomePage.tsx","AddRecipePage.tsx","SearchRecipePage.tsx","SignInPage.tsx","NotFoundPage.tsx","Comment.tsx","CommentList.tsx","RecipePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","gray2","gray5","fontFamily","AddRecipeButton","styled","button","UserIcon","src","user","alt","css","Header","to","type","placeholder","onChange","e","console","log","currentTarget","value","Recipe","data","showDescription","id","name","author","description","length","substring","RecipeList","renderItem","map","recipe","key","recipes","comments","commentId","comment","created","Date","getRecipes","a","wait","durationInMs","Promise","resolve","setTimeout","getRecipe","recipeId","results","filter","r","PageTitle","h2","Page","title","children","HomePage","history","useState","setRecipes","recipesLoading","setRecipesLoading","useEffect","onClick","push","AddRecipePage","SearchRecipePage","SignInPage","NotFoundPage","Comment","toLocaleDateString","toLocaleTimeString","CommentList","RecipePage","match","setRecipe","doGetRecipe","recipeFound","params","Number","App","exact","from","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e5e14c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.e6aaf430.svg\";","import styled from '@emotion/styled';\r\n\r\nexport const gray1 = '#383737';\r\nexport const gray2 = '#5c5a5a';\r\nexport const gray3 = '#857c81';\r\nexport const gray4 = '#b9b9b9';\r\nexport const gray5 = '#e3e2e2';\r\nexport const gray6 = '#f7f8fa';\r\nexport const primary1 = '#681c41';\r\nexport const primary2 = '#824c67';\r\nexport const accent1 = '#dbb365';\r\nexport const accent2 = '#efd197';\r\nexport const fontFamily = \"'Segoe UI', 'Helvetica Neue',sans-serif\";\r\nexport const fontSize = '16px';\r\n\r\n\r\nexport const AddRecipeButton = styled.button`\r\n    background-color: ${primary2};\r\n    border-color: ${primary2};\r\n    border-style: solid;\r\n    border-radius: 5px;\r\n    font-family: ${fontFamily};\r\n    font-size: ${fontSize};\r\n    padding: 5px 10px;\r\n    color: white;\r\n    cursor: pointer;\r\n        :hover\r\n        {\r\n            background-color: ${primary1};\r\n        }\r\n        :focus\r\n        {\r\n            outline-color: ${primary2};\r\n        }\r\n        :disabled\r\n        {\r\n            opacity: 0.5;\r\n            cursor: not-allowed;\r\n        }`;","/** @jsx jsx */\r\nimport user from './user.svg';\r\nimport { css, jsx } from '@emotion/core';\r\n\r\nexport const UserIcon = () => (\r\n  <img\r\n    src={user}\r\n    alt=\"User\"\r\n    css={css`\r\n      width: 12px;\r\n      opacity: 0.6;\r\n    `}\r\n  />\r\n);\r\n","\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { fontFamily, fontSize, gray2, gray1, gray5 } from './Styles';\r\nimport { UserIcon } from './Icons';\r\nimport { ChangeEvent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport const Header = () => {\r\n  const handleSearchInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    console.log(e.currentTarget.value);\r\n  };\r\n  return (\r\n  <div\r\n    css={css`\r\n      position: fixed;\r\n      box-sizing: border-box;\r\n      top: 0;\r\n      width: 100%;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      padding: 10px 20px;\r\n      background-color: #fff;\r\n      border-bottom: 1px solid ${gray5};\r\n      box-shadow: 0 3px 7px 0 rgba(110, 112, 114, 0.21);\r\n    `}\r\n  >\r\n    <Link\r\n      to=\"/recipes\"\r\n      css={css`\r\n        font-size: 24px;\r\n        font-weight: bold;\r\n        color: ${gray1};\r\n        text-decoration: none;\r\n      `}\r\n    >\r\n      Recipes\r\n    </Link>{' '}\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Search...\"\r\n      onChange={handleSearchInputChange}\r\n      css={css`\r\n        box-sizing: border-box;\r\n        font-family: ${fontFamily};\r\n        font-size: ${fontSize};\r\n        padding: 8px 10px;\r\n        border: 1px solid ${gray5};\r\n        border-radius: 3px;\r\n        color: ${gray2};\r\n        background-color: white;\r\n        width: 200px;\r\n        height: 30px;\r\n        :focus {\r\n          outline-color: ${gray5};\r\n        }\r\n      `}\r\n    />\r\n    <Link\r\n      to=\"/recipes/signin\"\r\n      css={css`\r\n        font-family: ${fontFamily};\r\n        font-size: ${fontSize};\r\n        padding: 5px 10px;\r\n        background-color: transparent;\r\n        color: ${gray2};\r\n        text-decoration: none;\r\n        cursor: pointer;\r\n        span {\r\n          margin-left: 10px;\r\n        }\r\n        :focus {\r\n          outline-color: ${gray5};\r\n        }\r\n      `}\r\n    >\r\n      <UserIcon />\r\n      <span>Sign In</span>\r\n    </Link>\r\n  </div>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport { FC } from 'react';\r\nimport { css, jsx } from '@emotion/core';\r\nimport { RecipeData } from './RecipeData';\r\nimport { gray2, gray3 } from './Styles';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {\r\n  data: RecipeData;\r\n  showDescription?: boolean;\r\n}\r\n\r\nexport const Recipe: FC<Props> = ({ data, showDescription = true }) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n    `}\r\n  >\r\n    {' '}\r\n    <div\r\n      css={css`\r\n        padding: 10px 0px;\r\n        font-size: 19px;\r\n      `}\r\n    >\r\n      <Link\r\n        css={css`\r\n          text-decoration: none;\r\n          color: ${gray2};\r\n        `}\r\n        to={`recipes/${data.id}`}\r\n        >\r\n      {data.name}\r\n      </Link>\r\n    </div>{' '}\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${gray3};\r\n      `}\r\n    >\r\n      {' '}\r\n      {`By ${data.author}`}\r\n      {' '}\r\n    </div>\r\n    { showDescription && (\r\n        <div\r\n          css={css`\r\n            padding-bottom: 10px;\r\n            font-size: 10px;\r\n            font-style: normal;\r\n            color: ${gray2};\r\n          `}\r\n        >\r\n          {data.description.length > 50 ? `${data.description.substring(0, 50)}...`\r\n            : data.description}\r\n        </div>\r\n    )}\r\n  </div>\r\n);\r\n","/** @jsx jsx */\r\nimport { FC } from 'react';\r\nimport { css, jsx } from '@emotion/core';\r\nimport { gray5, accent2 } from './Styles';\r\nimport { RecipeData } from './RecipeData';\r\nimport { Recipe } from './Recipe';\r\n\r\ninterface Props {\r\n    data: RecipeData[];\r\n    renderItem?: (item: RecipeData) => JSX.Element;\r\n}\r\n\r\nexport const RecipeList: FC<Props> =({data, renderItem}) => {\r\n    return (\r\n    <ul\r\n        css={css`\r\n            list-style: none;\r\n            margin: 10px 0 0 0 ;\r\n            padding: 0px 20px;\r\n            background-color: #fff;\r\n            border-bottom-left-radius: 4px;\r\n            border-bottom-right-radius: 4px;\r\n            border-top: 3px solid ${accent2};\r\n            box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n    >\r\n        { data.map(recipe => (\r\n        <li\r\n            css={css`\r\n                border-top: 1px solid ${gray5};\r\n                :first-of-type {\r\n                    border-top: none;\r\n                }\r\n            `}\r\n            key = {recipe.id}\r\n        >\r\n            {\r\n                renderItem ? renderItem(recipe) :\r\n                <Recipe data={recipe}\r\n                css={css`\r\n                    border-top: 1px solid ${gray5};\r\n                    :first-of-type {\r\n                    border-top: none;\r\n                    }\r\n            `}/>}\r\n        </li>\r\n        ))}\r\n    </ul>\r\n);\r\n};","export interface CommentData {\r\n    commentId: number;\r\n    comment: string;\r\n    author: string;\r\n    created: Date;\r\n}\r\n\r\nexport interface RecipeData {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    author: string;\r\n    comments: CommentData[];\r\n}\r\n\r\nconst recipes: RecipeData[] = [\r\n{\r\n    id: 1,\r\n    name: \"Hummus\",\r\n    description: `A simple dip with chickpeas. Lorem ipsum dolor sit amet,\r\n                  consectetur adipiscing elit, sed do eiusmod tempor incididunt\r\n                  ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n                  quis nostrud exercitation ullamco laboris nisi ut aliquip ex\r\n                  ea commodo consequat. Duis aute irure dolor in reprehenderit in\r\n                  voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n                  Excepteur sint occaecat cupidatat non proident, sunt in culpa\r\n                  qui officia deserunt mollit anim id est laborum.`,\r\n    author: \"Joe\",\r\n    comments: [\r\n        {\r\n            commentId: 1,\r\n            comment: \"Can I sub with black beans?\",\r\n            author: \"Bob\",\r\n            created: new Date()\r\n        }\r\n\r\n    ]\r\n},\r\n{\r\n    id: 2,\r\n    name: \"No bake fudge\",\r\n    description: `A no bake brownie fudge! Lorem ipsum dolor sit amet,\r\n                  consectetur adipiscing elit, sed do eiusmod tempor incididunt\r\n                  ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n                  quis nostrud exercitation ullamco laboris nisi ut aliquip ex\r\n                  ea commodo consequat. Duis aute irure dolor in reprehenderit in\r\n                  voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n                  Excepteur sint occaecat cupidatat non proident, sunt in culpa\r\n                  qui officia deserunt mollit anim id est laborum.`,\r\n    author: \"Greg\",\r\n    comments: [\r\n        {\r\n            commentId: 2,\r\n            comment: \"I find it nicer with soaked cashew nuts\",\r\n            author: \"Mad Hatter\",\r\n            created: new Date()\r\n        },\r\n        {\r\n            commentId: 3,\r\n            comment: \"I like walnuts better\",\r\n            author: \"Alice\",\r\n            created: new Date()\r\n        }\r\n    ]\r\n},\r\n{\r\n    id: 3,\r\n    name: \"Eggplant Salad\",\r\n    description: \"A salad for all ages. This salad contains all the good stuff, eggplant, kale and arugula.\",\r\n    author: \"Bob\",\r\n    comments: [\r\n        {\r\n            commentId: 4,\r\n            comment: \"I hate salad usually, but this is an exception!\",\r\n            author: \"Goat\",\r\n            created: new Date()\r\n        },\r\n        {\r\n            commentId: 5,\r\n            comment: \"Lol. Funny how you hate salads, I love any.\",\r\n            author: \"Cow\",\r\n            created: new Date()\r\n        }\r\n    ]\r\n},\r\n];\r\n\r\n\r\nexport const getRecipes = async (): Promise<RecipeData[]> => {\r\n    await wait(1000);\r\n    return recipes;\r\n};\r\n\r\nconst wait = (durationInMs: number): Promise<void> => {\r\n    return new Promise(resolve => setTimeout(resolve, durationInMs))\r\n};\r\n\r\n\r\nexport const getRecipe = async (\r\n    recipeId: number\r\n): Promise<RecipeData | null> => {\r\n    await wait(500);\r\n    const results = recipes.filter(r => r.id === recipeId);\r\n    return results.length === 0 ? null : results[0];\r\n};","import styled from '@emotion/styled';\r\n\r\n\r\n\r\nexport const PageTitle = styled.h2`\r\n  font-size: 15px;\r\n  font-weight: bold;\r\n  margin: 10px 0px 5px;\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n`;\r\n","/** @jsx jsx */\r\nimport { FC } from 'react';\r\nimport { css, jsx } from '@emotion/core';\r\nimport { PageTitle } from './PageTitle';\r\n\r\n\r\ninterface Props {\r\n    title?: string;\r\n}\r\n\r\nexport const Page: FC<Props> = ({ title, children }) => (\r\n    <div\r\n        css={css`\r\n            margin: 50px auto 20px auto;\r\n            padding: 30px 20px;\r\n            max-width: 600px;\r\n        `}\r\n        >\r\n        { title && <PageTitle>{title}</PageTitle>}\r\n        {children}\r\n        </div>\r\n);\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { AddRecipeButton } from './Styles';\r\nimport { RecipeList } from './RecipeList';\r\nimport { getRecipes, RecipeData } from './RecipeData';\r\nimport { Page } from './Page';\r\nimport { PageTitle } from './PageTitle';\r\nimport { useEffect, useState, FC } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\nexport const HomePage:FC<RouteComponentProps> = ({history}) => {\r\n  const [recipes, setRecipes]\r\n    = useState<RecipeData[] | null>(null);\r\n\r\n  const [recipesLoading, setRecipesLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const recipes = await getRecipes();\r\n      setRecipes(recipes);\r\n      setRecipesLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n  const handleAddRecipeClick = () => {\r\n    history.push('/recipes/add');\r\n  };\r\n  return (\r\n  <Page>\r\n      <div\r\n          css={css`\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n          `}\r\n      >\r\n      <PageTitle>Recipes</PageTitle>\r\n      <AddRecipeButton onClick={handleAddRecipeClick}>Add Recipe</AddRecipeButton>\r\n\r\n      </div>\r\n\r\n    {\r\n      recipesLoading ? (\r\n        <div\r\n          css={css`\r\n                font-size: 18px;\r\n                font-style: italic;\r\n              `}>\r\n            Loading yummy recipes...\r\n        </div>\r\n      ) : (\r\n        <RecipeList data={ recipes || [] }/>\r\n      )\r\n    }\r\n\r\n  </Page>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Page } from './Page';\r\n\r\nexport const AddRecipePage = () => <Page title=\"Add a Recipe\" />;","import React from 'react';\r\nimport { Page } from './Page';\r\n\r\nexport const SearchRecipePage = () => <Page title=\"Search Recipes\" />;","import React from 'react';\r\nimport { Page } from './Page';\r\n\r\n\r\nexport const SignInPage = () => <Page title=\"Sign In\" />;","import React from 'react';\r\nimport { Page } from './Page';\r\n\r\nexport const NotFoundPage = () => <Page title=\"Page Not Found\" />;","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { CommentData } from './RecipeData';\r\nimport { gray3 } from './Styles';\r\nimport { FC } from 'react';\r\n\r\ninterface Props {\r\n    data: CommentData;\r\n}\r\n\r\n\r\nexport const Comment: FC<Props> = ({ data }) => (\r\n    <div\r\n        css={css`\r\n         padding: 14px 0px;\r\n        `}\r\n    >\r\n        <div\r\n            css={css`\r\n                padding: 14px 0px;\r\n                font-size: 13px;\r\n            `}\r\n        >\r\n            {data.comment}\r\n        </div>\r\n        <div\r\n            css={css`\r\n                font-size: 12px;\r\n                font-style: italic;\r\n                color: ${gray3};\r\n            `}\r\n        >\r\n        {`Comment by ${data.author} on\r\n        ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}\r\n      </div>\r\n    </div>\r\n);","/** @jsx jsx */\r\nimport { FC } from 'react';\r\nimport { css, jsx } from '@emotion/core';\r\nimport { Comment } from './Comment';\r\nimport { gray5 } from './Styles';\r\nimport { CommentData } from './RecipeData';\r\n\r\ninterface Props {\r\n  data: CommentData[];\r\n}\r\n\r\nexport const CommentList: FC<Props> = ({ data }) => (\r\n  <ul\r\n    css={css`\r\n      list-style: none;\r\n      margin: 10px 0 0 0;\r\n      padding: 0;\r\n    `}\r\n  >\r\n    {' '}\r\n    {data.map((comment) => (\r\n      <li\r\n        css={css`\r\n          border-top: 1px solid ${gray5};\r\n        `}\r\n        key={comment.commentId}\r\n      >\r\n        {' '}\r\n        <Comment data={comment} />{' '}\r\n      </li>\r\n    ))}{' '}\r\n  </ul>\r\n);\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { gray3, gray6 } from './Styles';\r\nimport { FC, useState, Fragment, useEffect } from 'react';\r\nimport { Page } from './Page';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { RecipeData, getRecipe } from './RecipeData';\r\nimport { CommentList } from './CommentList';\r\n\r\ninterface RouteParams {\r\n    recipeId: string;\r\n}\r\n\r\nexport const RecipePage:FC<RouteComponentProps<RouteParams>> = ({\r\n    match\r\n}) => {\r\n    const [recipe, setRecipe] = useState<RecipeData | null>(null);\r\n\r\n    useEffect(() => {\r\n        const doGetRecipe = async (recipeId: number) => {\r\n            const recipeFound = await getRecipe(recipeId);\r\n            setRecipe(recipeFound);\r\n        };\r\n        if (match.params.recipeId) {\r\n            const recipeId = Number(match.params.recipeId);\r\n            doGetRecipe(recipeId);\r\n        }\r\n    }, [match.params.recipeId]);\r\n\r\n    return <Page>\r\n            <div\r\n            css={css`\r\n                background-color: white;\r\n                padding: 15px 20px 20px 20px;\r\n                border-radius: 4px;\r\n                border: 1px solid ${gray6};\r\n                box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n                `}\r\n            >\r\n\r\n                <div\r\n                css={css`\r\n                    font-size: 19px;\r\n                    font-weight: bold;\r\n                    margin: 10px 0px 5px;\r\n                    `}\r\n                >\r\n                    {recipe === null ? '' : recipe.name}\r\n                </div>\r\n\r\n                {recipe !== null && (\r\n                    <Fragment>\r\n                        <p\r\n                            css={css`\r\n                            margin-top: 0px;\r\n                            background-color: white;\r\n                            `}\r\n                        >\r\n                        {recipe?.description}\r\n                        </p>\r\n                        <div\r\n                            css={css`\r\n                            font-size: 12px;\r\n                            font-style: italic;\r\n                            color: ${gray3};\r\n                            `}\r\n                        >\r\n                            {`Created by ${recipe.author}`}\r\n                        </div>\r\n                        <CommentList data={recipe.comments} />\r\n                    </Fragment>\r\n                )}\r\n            </div>\r\n        </Page>;\r\n};","/** @jsx jsx */\r\nimport { Header } from './Header';\r\nimport { HomePage } from './HomePage';\r\nimport { css, jsx } from '@emotion/core';\r\nimport { fontFamily, fontSize, gray2 } from './Styles';\r\n\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { AddRecipePage } from './AddRecipePage';\r\nimport { SearchRecipePage } from './SearchRecipePage';\r\nimport { SignInPage } from './SignInPage';\r\nimport { NotFoundPage } from './NotFoundPage';\r\nimport { RecipePage } from './RecipePage';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <BrowserRouter>\r\n    <div\r\n      css={css`\r\n      font-family: ${fontFamily};\r\n      font-size: ${fontSize};\r\n      color: ${gray2};\r\n    `}\r\n>\r\n      <Header />\r\n      <Switch>\r\n      <Redirect exact from='/' to='/' />\r\n\r\n      <Route path=\"/recipes/search\" component={SearchRecipePage} />\r\n      <Route path=\"/recipes/add\" component={AddRecipePage} />\r\n      <Route path=\"/recipes/signin\" component={SignInPage} />\r\n      <Route exact path=\"/recipes/:recipeId\" component={RecipePage} />\r\n      <Route exact path=\"/recipes\" component={HomePage} />\r\n      <Route component={NotFoundPage} />\r\n      </Switch>\r\n    </div>\r\n  </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}