{"version":3,"sources":["user.svg","Styles.ts","Icons.tsx","Header.tsx","Recipe.tsx","RecipeList.tsx","RecipeData.ts","PageTitle.tsx","Page.tsx","HomePage.tsx","AddRecipePage.tsx","SearchRecipePage.tsx","SignInPage.tsx","NotFoundPage.tsx","Comment.tsx","CommentList.tsx","RecipePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","gray5","fontFamily","Line","styled","div","LineNo","span","LineContent","AddRecipeButton","button","UserIcon","src","user","alt","css","Header","to","type","placeholder","onChange","e","console","log","currentTarget","value","Recipe","data","showDescription","id","name","author","description","length","substring","RecipeList","renderItem","map","recipe","key","recipes","code","language","comments","commentId","comment","topic","created","Date","getRecipes","a","wait","durationInMs","Promise","resolve","setTimeout","getRecipe","recipeId","results","filter","r","PageTitle","h2","Page","title","children","HomePage","history","useState","setRecipes","recipesLoading","setRecipesLoading","useEffect","onClick","push","AddRecipePage","SearchRecipePage","SignInPage","NotFoundPage","Comment","toLocaleDateString","toLocaleTimeString","CommentList","RecipePage","match","setRecipe","doGetRecipe","recipeFound","params","Number","defaultProps","className","style","tokens","getLineProps","getTokenProps","line","i","token","App","pathname","useLocation","from","slice","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0cd46560.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.e6aaf430.svg\";","import styled from '@emotion/styled';\r\n\r\nexport const white1 = '#FFFFFF';\r\nexport const white2 = '#B9B6B8';\r\nexport const white3 = '#b9b6b8';\r\nexport const gray4 = '#b9b9b9';\r\nexport const gray5 = '#e3e2e2';\r\nexport const gray6 = '#f7f8fa';\r\nexport const primary1 = '#B1D076';\r\nexport const primary2 = '#99C24D';\r\nexport const accent1 = '#dbb365';\r\nexport const accent2 = '#048ba8';\r\nexport const fontFamily = \"'Segoe UI', 'Helvetica Neue',sans-serif\";\r\nexport const fontSize = '16px';\r\n\r\nexport const backgroundColour1 = '#1C2835';\r\nexport const backgroundColour2 = '#2F2D2E';\r\n\r\nexport const Line = styled.div`\r\n  display: table-row;\r\n`;\r\n\r\nexport const LineNo = styled.span`\r\n  display: table-cell;\r\n  text-align: right;\r\n  padding-right: 1em;\r\n  user-select: none;\r\n  opacity: 0.5;\r\n`;\r\n\r\nexport const LineContent = styled.span`\r\n  display: table-cell;\r\n`;\r\n\r\nexport const AddRecipeButton = styled.button`\r\n    background-color: ${primary2};\r\n    border-color: ${primary2};\r\n    border-style: solid;\r\n    border-radius: 5px;\r\n    font-family: ${fontFamily};\r\n    font-size: ${fontSize};\r\n    padding: 5px 10px;\r\n    color: ${white1};\r\n    cursor: pointer;\r\n        :hover\r\n        {\r\n            background-color: ${primary1};\r\n        }\r\n        :focus\r\n        {\r\n            outline-color: ${primary2};\r\n        }\r\n        :disabled\r\n        {\r\n            opacity: 0.5;\r\n            cursor: not-allowed;\r\n        }`;","/** @jsx jsx */\r\nimport user from './user.svg';\r\nimport { css, jsx } from '@emotion/core';\r\n\r\nexport const UserIcon = () => (\r\n  <img\r\n    src={user}\r\n    alt=\"User\"\r\n    css={css`\r\n      width: 12px;\r\n      opacity: 0.6;\r\n    `}\r\n  />\r\n);\r\n","\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { fontFamily, fontSize, white2, white1, gray5, backgroundColour1 } from './Styles';\r\nimport { UserIcon } from './Icons';\r\nimport { ChangeEvent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport const Header = () => {\r\n  const handleSearchInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    console.log(e.currentTarget.value);\r\n  };\r\n  return (\r\n  <div\r\n    css={css`\r\n      position: fixed;\r\n      box-sizing: border-box;\r\n      top: 0;\r\n      width: 100%;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      padding: 10px 20px;\r\n      background-color: ${backgroundColour1};\r\n      border-bottom: 1px solid ${gray5};\r\n      box-shadow: 0 3px 7px 0 rgba(110, 112, 114, 0.21);\r\n    `}\r\n  >\r\n    <Link\r\n      to=\"/recipes\"\r\n      css={css`\r\n        font-size: 24px;\r\n        font-weight: bold;\r\n        color: ${white1};\r\n        text-decoration: none;\r\n      `}\r\n    >\r\n      Recipes\r\n    </Link>{' '}\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Search...\"\r\n      onChange={handleSearchInputChange}\r\n      css={css`\r\n        box-sizing: border-box;\r\n        font-family: ${fontFamily};\r\n        font-size: ${fontSize};\r\n        padding: 8px 10px;\r\n        border: 1px solid ${gray5};\r\n        border-radius: 3px;\r\n        color: ${white2};\r\n        background-color: white;\r\n        width: 200px;\r\n        height: 30px;\r\n        :focus {\r\n          outline-color: ${gray5};\r\n        }\r\n      `}\r\n    />\r\n    <Link\r\n      to=\"/recipes/signin\"\r\n      css={css`\r\n        font-family: ${fontFamily};\r\n        font-size: ${fontSize};\r\n        padding: 5px 10px;\r\n        background-color: transparent;\r\n        color: ${white2};\r\n        text-decoration: none;\r\n        cursor: pointer;\r\n        span {\r\n          margin-left: 10px;\r\n        }\r\n        :focus {\r\n          outline-color: ${gray5};\r\n        }\r\n      `}\r\n    >\r\n      <UserIcon />\r\n      <span>Sign In</span>\r\n    </Link>\r\n  </div>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport { FC } from 'react';\r\nimport { css, jsx } from '@emotion/core';\r\nimport { RecipeData } from './RecipeData';\r\nimport { white2, white3 } from './Styles';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {\r\n  data: RecipeData;\r\n  showDescription?: boolean;\r\n}\r\n\r\nexport const Recipe: FC<Props> = ({ data, showDescription = true }) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n    `}\r\n  >\r\n    {' '}\r\n    <div\r\n      css={css`\r\n        padding: 10px 0px;\r\n        font-size: 19px;\r\n      `}\r\n    >\r\n      <Link\r\n        css={css`\r\n          text-decoration: none;\r\n          color: ${white2};\r\n        `}\r\n        to={`recipes/${data.id}`}\r\n        >\r\n      {data.name}\r\n      </Link>\r\n    </div>{' '}\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${white3};\r\n      `}\r\n    >\r\n      {' '}\r\n      {`By ${data.author}`}\r\n      {' '}\r\n    </div>\r\n    { showDescription && (\r\n        <div\r\n          css={css`\r\n            padding-bottom: 10px;\r\n            font-size: 10px;\r\n            font-style: normal;\r\n            color: ${white2};\r\n          `}\r\n        >\r\n          {data.description.length > 50 ? `${data.description.substring(0, 50)}...`\r\n            : data.description}\r\n\r\n        </div>\r\n\r\n    )}\r\n  </div>\r\n);\r\n","/** @jsx jsx */\r\nimport { FC } from 'react';\r\nimport { css, jsx } from '@emotion/core';\r\nimport { gray5, accent2, backgroundColour2 } from './Styles';\r\nimport { RecipeData } from './RecipeData';\r\nimport { Recipe } from './Recipe';\r\n\r\ninterface Props {\r\n    data: RecipeData[];\r\n    renderItem?: (item: RecipeData) => JSX.Element;\r\n}\r\n\r\nexport const RecipeList: FC<Props> =({data, renderItem}) => {\r\n    return (\r\n    <ul\r\n        css={css`\r\n            list-style: none;\r\n            margin: 10px 0 0 0 ;\r\n            padding: 0px 20px;\r\n            background-color: ${backgroundColour2};\r\n            border-bottom-left-radius: 4px;\r\n            border-bottom-right-radius: 4px;\r\n            border-top: 3px solid ${accent2};\r\n            box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n    >\r\n        { data.map(recipe => (\r\n        <li\r\n            css={css`\r\n                border-top: 1px solid ${gray5};\r\n                :first-of-type {\r\n                    border-top: none;\r\n                }\r\n            `}\r\n            key = {recipe.id}\r\n        >\r\n            {\r\n                renderItem ? renderItem(recipe) :\r\n                <Recipe data={recipe}\r\n                css={css`\r\n                    border-top: 1px solid ${gray5};\r\n                    :first-of-type {\r\n                    border-top: none;\r\n                    }\r\n            `}/>}\r\n        </li>\r\n        ))}\r\n    </ul>\r\n);\r\n};","import { Language } from 'prism-react-renderer';\r\n\r\nexport interface CommentData {\r\n    commentId: number;\r\n    comment: string;\r\n    topic: string;\r\n    created: Date;\r\n}\r\n\r\nexport interface RecipeData {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    code: string;\r\n    author: string;\r\n    language: Language;\r\n    comments: CommentData[];\r\n}\r\n\r\nconst recipes: RecipeData[] = [\r\n{\r\n    id: 1,\r\n    name: \"Emulating Switch/Case Statements With Dicts\",\r\n    description: `Python doesn’t have switch/case statements so it’s sometimes necessary\r\n                  to write long if…elif…else chains as a workaround.\r\n\r\n                  One way to deal with long if…elif…else statements is to replace\r\n                  them with dictionary lookup tables that emulate the behavior of\r\n                  switch/case statements.\r\n                  `,\r\n    code: `def dispatch_dict(operator, x, y):\r\n              return {\r\n              'add': lambda: x + y,\r\n              'sub': lambda: x - y,\r\n              'mul': lambda: x * y,\r\n              'div': lambda: x / y,\r\n              }.get(operator, lambda: None)()`,\r\n    language: \"python\",\r\n    author: \"Dan Bader, Python Tricks: The Book\",\r\n    comments: [\r\n        {\r\n            commentId: 1,\r\n            comment: \"\",\r\n            topic: \"python\",\r\n            created: new Date()\r\n        }\r\n\r\n    ]\r\n},\r\n\r\n\r\n];\r\n\r\n\r\nexport const getRecipes = async (): Promise<RecipeData[]> => {\r\n    await wait(1000);\r\n    return recipes;\r\n};\r\n\r\nconst wait = (durationInMs: number): Promise<void> => {\r\n    return new Promise(resolve => setTimeout(resolve, durationInMs))\r\n};\r\n\r\n\r\nexport const getRecipe = async (\r\n    recipeId: number\r\n): Promise<RecipeData | null> => {\r\n    await wait(500);\r\n    const results = recipes.filter(r => r.id === recipeId);\r\n    return results.length === 0 ? null : results[0];\r\n};","import styled from '@emotion/styled';\r\n\r\n\r\n\r\nexport const PageTitle = styled.h2`\r\n  font-size: 15px;\r\n  font-weight: bold;\r\n  margin: 10px 0px 5px;\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n`;\r\n","/** @jsx jsx */\r\nimport { FC } from 'react';\r\nimport { css, jsx } from '@emotion/core';\r\nimport { PageTitle } from './PageTitle';\r\n\r\n\r\ninterface Props {\r\n    title?: string;\r\n}\r\n\r\nexport const Page: FC<Props> = ({ title, children }) => (\r\n    <div\r\n        css={css`\r\n            margin: 50px auto 20px auto;\r\n            padding: 30px 20px;\r\n            max-width: 600px;\r\n        `}\r\n        >\r\n        { title && <PageTitle>{title}</PageTitle>}\r\n        {children}\r\n        </div>\r\n);\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { AddRecipeButton } from './Styles';\r\nimport { RecipeList } from './RecipeList';\r\nimport { getRecipes, RecipeData } from './RecipeData';\r\nimport { Page } from './Page';\r\nimport { PageTitle } from './PageTitle';\r\nimport { useEffect, useState, FC } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\nexport const HomePage:FC<RouteComponentProps> = ({history}) => {\r\n  const [recipes, setRecipes]\r\n    = useState<RecipeData[] | null>(null);\r\n\r\n  const [recipesLoading, setRecipesLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const recipes = await getRecipes();\r\n      setRecipes(recipes);\r\n      setRecipesLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n  const handleAddRecipeClick = () => {\r\n    history.push('/recipes/add');\r\n  };\r\n  return (\r\n  <Page>\r\n      <div\r\n          css={css`\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n          `}\r\n      >\r\n      <PageTitle>Recipes</PageTitle>\r\n      <AddRecipeButton onClick={handleAddRecipeClick}>Add Recipe</AddRecipeButton>\r\n\r\n      </div>\r\n\r\n    {\r\n      recipesLoading ? (\r\n        <div\r\n          css={css`\r\n                font-size: 18px;\r\n                font-style: italic;\r\n              `}>\r\n            Loading awesome code recipes...\r\n        </div>\r\n      ) : (\r\n        <RecipeList data={ recipes || [] }/>\r\n      )\r\n    }\r\n\r\n  </Page>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Page } from './Page';\r\n\r\nexport const AddRecipePage = () => <Page title=\"Add a Recipe\" />;","import React from 'react';\r\nimport { Page } from './Page';\r\n\r\nexport const SearchRecipePage = () => <Page title=\"Search Recipes\" />;","import React from 'react';\r\nimport { Page } from './Page';\r\n\r\n\r\nexport const SignInPage = () => <Page title=\"Sign In\" />;","import React from 'react';\r\nimport { Page } from './Page';\r\n\r\nexport const NotFoundPage = () => <Page title=\"Page Not Found\" />;","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { CommentData } from './RecipeData';\r\nimport { white3 } from './Styles';\r\nimport { FC } from 'react';\r\n\r\ninterface Props {\r\n    data: CommentData;\r\n}\r\n\r\n\r\nexport const Comment: FC<Props> = ({ data }) => (\r\n    <div\r\n        css={css`\r\n         padding: 14px 0px;\r\n        `}\r\n    >\r\n        <div\r\n            css={css`\r\n                padding: 14px 0px;\r\n                font-size: 13px;\r\n            `}\r\n        >\r\n            {data.comment}\r\n        </div>\r\n        <div\r\n            css={css`\r\n                font-size: 12px;\r\n                font-style: italic;\r\n                color: ${white3};\r\n            `}\r\n        >\r\n        {`Topic ${data.topic} on\r\n        ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}\r\n      </div>\r\n    </div>\r\n);","/** @jsx jsx */\r\nimport { FC } from 'react';\r\nimport { css, jsx } from '@emotion/core';\r\nimport { Comment } from './Comment';\r\nimport { gray5 } from './Styles';\r\nimport { CommentData } from './RecipeData';\r\n\r\ninterface Props {\r\n  data: CommentData[];\r\n}\r\n\r\nexport const CommentList: FC<Props> = ({ data }) => (\r\n  <ul\r\n    css={css`\r\n      list-style: none;\r\n      margin: 10px 0 0 0;\r\n      padding: 0;\r\n    `}\r\n  >\r\n    {' '}\r\n    {data.map((comment) => (\r\n      <li\r\n        css={css`\r\n          border-top: 1px solid ${gray5};\r\n        `}\r\n        key={comment.commentId}\r\n      >\r\n        {' '}\r\n        <Comment data={comment} />{' '}\r\n      </li>\r\n    ))}{' '}\r\n  </ul>\r\n);\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { white3, gray6, backgroundColour2, Line, LineNo, LineContent } from './Styles';\r\nimport { FC, useState, Fragment, useEffect } from 'react';\r\nimport { Page } from './Page';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { RecipeData, getRecipe } from './RecipeData';\r\nimport { CommentList } from './CommentList';\r\nimport Highlight, { defaultProps } from 'prism-react-renderer';\r\n\r\n\r\ninterface RouteParams {\r\n  recipeId: string;\r\n}\r\n\r\nexport const RecipePage: FC<RouteComponentProps<RouteParams>> = ({ match }) => {\r\n  const [recipe, setRecipe] = useState<RecipeData | null>(null);\r\n\r\n  useEffect(() => {\r\n    const doGetRecipe = async (recipeId: number) => {\r\n      const recipeFound = await getRecipe(recipeId);\r\n      setRecipe(recipeFound);\r\n    };\r\n    if (match.params.recipeId) {\r\n      const recipeId = Number(match.params.recipeId);\r\n      doGetRecipe(recipeId);\r\n    }\r\n  }, [match.params.recipeId]);\r\n\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          background-color: ${backgroundColour2};\r\n          padding: 15px 20px 20px 20px;\r\n          border-radius: 4px;\r\n          border: 1px solid ${gray6};\r\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            font-size: 19px;\r\n            font-weight: bold;\r\n            margin: 10px 0px 5px;\r\n            color: ${white3};\r\n          `}\r\n        >\r\n          {recipe === null ? '' : recipe.name}\r\n        </div>\r\n\r\n        {recipe !== null && (\r\n          <Fragment>\r\n            <p\r\n              css={css`\r\n                margin-top: 0px;\r\n                background-color: ${backgroundColour2};\r\n              `}\r\n            >\r\n              {recipe?.description}\r\n            </p>\r\n            <div\r\n              css={css`\r\n                font-size: 12px;\r\n                font-style: italic;\r\n                color: ${white3};\r\n              `}\r\n            >\r\n              {`From ${recipe.author}`}\r\n            </div>\r\n            <Highlight {...defaultProps} code={`${recipe.code}`} language={recipe.language}>\r\n              {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n                <pre className={className} style={style}>\r\n                  {tokens.map((line, i) => (\r\n                    <Line key={i} {...getLineProps({ line, key: i })}>\r\n                      <LineNo>{i + 1}</LineNo>\r\n                      <LineContent>\r\n                        {line.map((token, key) => (\r\n                          <span key={key} {...getTokenProps({ token, key })} />\r\n                        ))}\r\n                      </LineContent>\r\n                    </Line>\r\n                  ))}\r\n                </pre>\r\n              )}\r\n            </Highlight>\r\n\r\n            <CommentList data={recipe.comments} />\r\n          </Fragment>\r\n        )}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport { Header } from './Header';\r\nimport { HomePage } from './HomePage';\r\nimport { css, jsx } from '@emotion/core';\r\nimport { fontFamily, fontSize, white2 } from './Styles';\r\n\r\nimport { Route, Switch, Redirect, useLocation } from 'react-router-dom';\r\nimport { AddRecipePage } from './AddRecipePage';\r\nimport { SearchRecipePage } from './SearchRecipePage';\r\nimport { SignInPage } from './SignInPage';\r\nimport { NotFoundPage } from './NotFoundPage';\r\nimport { RecipePage } from './RecipePage';\r\n\r\nconst App: React.FC = () => {\r\n  const { pathname } = useLocation();\r\n  return (\r\n\r\n    <div\r\n      css={css`\r\n      font-family: ${fontFamily};\r\n      font-size: ${fontSize};\r\n      color: ${white2};\r\n    `}\r\n>\r\n      <Header />\r\n      <Switch>\r\n      <Redirect from=\"/:url*(/+)\" to={pathname.slice(0,-1)} />\r\n      <Route exact path=\"/recipes\" component={HomePage} />\r\n      <Route path=\"/recipes/search\" component={SearchRecipePage} />\r\n      <Route path=\"/recipes/add\" component={AddRecipePage} />\r\n      <Route path=\"/recipes/signin\" component={SignInPage} />\r\n      <Route exact path=\"/recipes/:recipeId\" component={RecipePage} />\r\n      <Route component={NotFoundPage} />\r\n      </Switch>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n    <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}