{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","Form.tsx","Field.tsx","AddRecipePage.tsx"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","required","undefined","minLength","FormContext","createContext","values","errors","touched","Form","submitCaption","validationRules","children","useState","setValues","setErrors","setTouched","Provider","setValue","fieldName","validate","rules","Array","isArray","fieldErrors","rule","error","validator","arg","newErrors","noValidate","css","gray6","gray5","type","baseCSS","fontFamily","fontSizeSmall","white3","Field","name","label","useContext","handleChange","e","currentTarget","handleBlur","Consumer","htmlFor","toLowerCase","id","onChange","onBlur","map","AddRecipePage","Page","title","content","sourcecode"],"mappings":"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","file":"static/js/3.f8d2c74c.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { FC, useState, createContext } from 'react';\r\nimport { AddRecipeButton, gray5, gray6 } from './Styles';\r\n\r\nexport interface Values {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface Errors {\r\n  [key: string]: string[];\r\n}\r\n\r\nexport interface Touched {\r\n  [key: string]: boolean;\r\n}\r\n\r\ninterface FormContextProps {\r\n  values: Values;\r\n  setValue?: (fieldName: string, value: any) => void;\r\n  errors: Errors;\r\n  validate?: (fieldName: string) => void;\r\n  touched: Touched;\r\n  setTouched?: (fieldName: string) => void;\r\n}\r\n\r\ntype Validator = (value: any, args?: any) => string;\r\n\r\nexport const required: Validator = (value: any): string =>\r\n  value === undefined || value === null || value === ''\r\n    ? 'This must be populated'\r\n    : '';\r\n\r\nexport const minLength: Validator = (value: any, length: number): string =>\r\n  value && value.length < length\r\n    ? `This must be at least ${length} characters`\r\n    : '';\r\n\r\nexport const FormContext = createContext<FormContextProps>({\r\n  values: {},\r\n  errors: {},\r\n  touched: {},\r\n});\r\n\r\ninterface Validation {\r\n  validator: Validator;\r\n  arg?: any;\r\n}\r\ninterface ValidationProp {\r\n  [key: string]: Validation | Validation[];\r\n}\r\n\r\ninterface Props {\r\n  submitCaption?: string;\r\n  validationRules?: ValidationProp;\r\n}\r\n\r\nexport const Form: FC<Props> = ({\r\n  submitCaption,\r\n  validationRules,\r\n  children,\r\n}) => {\r\n  const [values, setValues] = useState<Values>({});\r\n  const [errors, setErrors] = useState<Errors>({});\r\n  const [touched, setTouched] = useState<Touched>({});\r\n  const validate = (fieldName: string): string[] => {\r\n    if (!validationRules) {\r\n      return [];\r\n    }\r\n    if (!validationRules[fieldName]) {\r\n      return [];\r\n    }\r\n    const rules = Array.isArray(validationRules[fieldName])\r\n      ? (validationRules[fieldName] as Validation[])\r\n      : ([validationRules[fieldName]] as Validation[]);\r\n\r\n    const fieldErrors: string[] = [];\r\n    rules.forEach(rule => {\r\n      const error = rule.validator(values[fieldName], rule.arg);\r\n      if (error) {\r\n        fieldErrors.push(error);\r\n      }\r\n    });\r\n\r\n    const newErrors = { ...errors, [fieldName]: fieldErrors };\r\n    setErrors(newErrors);\r\n    return fieldErrors;\r\n  };\r\n  return (\r\n    <FormContext.Provider\r\n      value={{\r\n        values,\r\n        setValue: (fieldName: string, value: any) => {\r\n          setValues({ ...values, [fieldName]: value });\r\n        },\r\n        errors,\r\n        validate,\r\n        touched,\r\n        setTouched: (fieldName: string) => {\r\n          setTouched({ ...touched, [fieldName]: true });\r\n        },\r\n      }}\r\n    >\r\n      <form noValidate={true}>\r\n        {' '}\r\n        <fieldset\r\n          css={css`\r\n            margin: 10px auto 0 auto;\r\n            padding: 30px;\r\n            width: 350px;\r\n            background-color: ${gray6};\r\n            border-radius: 4px;\r\n            border: 1px solid ${gray5};\r\n            box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n          `}\r\n        >\r\n          {children}\r\n          <div\r\n            css={css`\r\n              margin: 30px 0px 0px 0px;\r\n              padding: 20px 0px 0px 0px;\r\n              border-top: 1px solid ${gray5};\r\n            `}\r\n          >\r\n            <AddRecipeButton type=\"submit\"> {submitCaption} </AddRecipeButton>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </FormContext.Provider>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { fontFamily, gray5, gray6, white3, fontSizeSmall } from './Styles';\r\nimport { FC, useContext, ChangeEvent } from 'react';\r\nimport { FormContext } from './Form';\r\n\r\ninterface Props {\r\n  name: string;\r\n  label?: string;\r\n  type?: 'Text' | 'TextArea' | 'Password';\r\n}\r\n\r\nconst baseCSS = css`\r\n  box-sizing: border-box;\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSizeSmall};\r\n  margin-bottom: 5px;\r\n  padding: 8px 10px;\r\n  border: 1px solid ${gray5};\r\n  border-radius: 3px;\r\n  color: ${white3};\r\n  background-color: white;\r\n  width: 100%;\r\n  :focus {\r\n    outline-color: ${gray5};\r\n  }\r\n  :disabled {\r\n    background-color: ${gray6};\r\n  }\r\n`;\r\n\r\nexport const Field: FC<Props> = ({ name, label, type = 'Text' }) => {\r\n  const { setValue, touched, setTouched, validate } = useContext(FormContext);\r\n  const handleChange = (\r\n    e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>,\r\n  ) => {\r\n    if (setValue) {\r\n      setValue(name, e.currentTarget.value);\r\n    }\r\n\r\n    if (touched[name]) {\r\n      if (validate) {\r\n        validate(name);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (setTouched) {\r\n      setTouched(name);\r\n    }\r\n    if (validate) {\r\n      validate(name);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormContext.Consumer>\r\n      {({ values, errors }) => (\r\n        <div\r\n          css={css`\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin-bottom: 15px;\r\n          `}\r\n        >\r\n          {label && (\r\n            <label\r\n              css={css`\r\n                font-weight: bold;\r\n              `}\r\n              htmlFor={name}\r\n            >\r\n              {label}\r\n            </label>\r\n          )}\r\n          {(type === 'Text' || type === 'Password') && (\r\n            <input\r\n              type={type.toLowerCase()}\r\n              id={name}\r\n              value={values[name] === undefined ? '' : values[name]}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              css={baseCSS}\r\n            />\r\n          )}\r\n          {type === 'TextArea' && (\r\n            <textarea\r\n              id={name}\r\n              value={values[name] === undefined ? '' : values[name]}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              css={css`\r\n                ${baseCSS};\r\n                height: 100px;\r\n              `}\r\n            />\r\n          )}\r\n\r\n          {errors[name] &&\r\n            errors[name].length > 0 &&\r\n            errors[name].map((error) => (\r\n              <div\r\n                key={error}\r\n                css={css`\r\n                  font-size: 12px;\r\n                  color: red;\r\n                `}\r\n              >\r\n                {error}\r\n              </div>\r\n            ))}\r\n        </div>\r\n      )}\r\n    </FormContext.Consumer>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Page } from './Page';\r\nimport { Form, required, minLength } from './Form';\r\nimport { Field } from './Field';\r\n\r\nexport const AddRecipePage = () => (\r\n  <Page\r\n    title=\"Add a Recipe\">\r\n    <Form submitCaption=\"Submit Code Recipe\"\r\n    validationRules={{\r\n        title: [{ validator: required }, { validator: minLength, arg: 10 }],\r\n        content: [{ validator: required }, { validator: minLength, arg: 50 }],\r\n        sourcecode: [{ validator: required }, { validator: minLength, arg: 50 }],\r\n      }}>\r\n      <Field name=\"title\" label=\"Title\" />\r\n      <Field name=\"content\" label=\"Content\" type=\"TextArea\" />\r\n      <Field name=\"originator\" label=\"By\" />\r\n      <Field name=\"sourcecode\" label=\"Snippet\" type=\"TextArea\" />\r\n    </Form>\r\n  </Page>\r\n);\r\n\r\nexport default AddRecipePage;\r\n"],"sourceRoot":""}